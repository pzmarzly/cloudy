#!/usr/bin/env bash

# Cloudy: supercharge your workflow with cloud workers
# Copyright (C) 2019 Paweł Zmarzły
#
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program; if not,
# write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

set -e

# Constants

GLOBAL_CONF=~/.cloudy
GLOBAL_INIT=~/.cloudy-init.sh
LOCAL_CONF=.cloudy
LOCAL_INIT=.cloudy-init.sh
LOCAL_LOCKFILE=.cloudy-server-running
SERVER_SIDE_UTILS_DIR=/cloudy-bin

# Defaults

KEY_PATH=~/.ssh/id_rsa
REGION=fra1
SIZE=s-1vcpu-1gb
FILE_CHANNEL_REUSE=1
SEND_CLOUDY=0
SEND_GITIGNORE=0
SEND_GIT=0

# Load config

if [ -f $GLOBAL_CONF ]; then
    . $GLOBAL_CONF
fi

if [ -f $LOCAL_CONF ]; then
    . $LOCAL_CONF
fi

if [ -f $LOCAL_LOCKFILE ]; then
    ID=$(cat $LOCAL_LOCKFILE | cut -f1 -d' ')
fi

if [ -f $LOCAL_LOCKFILE ]; then
    IP=$(cat $LOCAL_LOCKFILE | cut -f2 -d' ')
fi

# Utilities

assert_lockfile_present() {
    if [ ! -f $LOCAL_LOCKFILE ]; then
        echo "Server not running!"
        echo "$LOCAL_LOCKFILE was not found. Start with \"cloudy init\"."
        exit 1
    fi
}

assert_lockfile_absent() {
    if [ -f $LOCAL_LOCKFILE ]; then
        echo "Server already running!"
        echo "Check server status and remove $LOCAL_LOCKFILE if it is not."
        exit 1
    fi
}

# Network utilities

m_ssh() {
    FLAGS=("-o" "ControlMaster=auto"
        "-o" "ControlPersist=600"
        "-o" "ControlPath=~/.ssh/master-$1"
        "-i" "$KEY_PATH"
        "root@$2" "$3")
    ssh "${FLAGS[@]}"
}

m_rsync() {
    FLAGS=("-r" "-t" "-p") # t - timestamps, p - permissions

    if [ "$SEND_CLOUDY" == "0" ]; then
        FLAGS+=("--exclude=.cloudy*")
    fi
    if [ "$SEND_GITIGNORE" == "0" ]; then
        FLAGS+=("--filter=:- .gitignore")
    fi
    if [ "$SEND_GIT" == "0" ]; then
        FLAGS+=("--exclude=.git*")
    fi

    if [ "$FILE_CHANNEL_REUSE" != "0" ]; then
        FLAGS+=("-e"
            "ssh -o ControlMaster=auto -o ControlPersist=600 -o ControlPath=~/.ssh/master-$1 -i $KEY_PATH")
    fi

    FLAGS+=("." "root@$2:~/cloudy/")

    rsync "${FLAGS[@]}"
}

m_rev_rsync() {
    FLAGS=("-r" "-t" "-p")

    if [ "$FILE_CHANNEL_REUSE" != "0" ]; then
        FLAGS+=("-e"
            "ssh -o ControlMaster=auto -o ControlPersist=600 -o ControlPath=~/.ssh/master-$1 -i $KEY_PATH")
    fi

    # strip trailing slash, otherwise rsync will merge directories
    STRIPPED_PATH=$(echo ${3%/})

    OUTPUT_DIR=$(dirname $STRIPPED_PATH)
    mkdir -p $OUTPUT_DIR

    FLAGS+=("root@$2:~/cloudy/$STRIPPED_PATH" "$OUTPUT_DIR")

    rsync "${FLAGS[@]}"
}

m_x2go() {
    FLAGS=("--server" "$2"
        "--user" "root"
        "--command" "$3"
        "--terminate-on-ctrl-c"
        "--ssh-privkey" "$KEY_PATH")
    pyhoca-cli "${FLAGS[@]}"
}

# Subcommands

## Help

print_help() {
    echo "Cloudy - set up VPS and run your workflow on it. Sends your current working"
    echo "  directory, by default without .gitignore-d files and .git."
    echo ""
    echo "See https://github.com/pzmarzly/cloudy for more details and config guide."
    echo ""
    echo "Subcommands - init:"
    echo "  order - starts new server on DigitalOcean"
    echo "  use <[USER@]IP or NAME> - connects to server. NAME must be in ~/.ssh/config"
    echo "Subcommands - control:"
    echo "  reinit - reexecutes $LOCAL_INIT on server"
    echo "  cmd <COMMAND...> - runs command on server. Interactive shell"
    echo "  cmd-alt <COMMAND...> - runs command on server. Non-interactive shell"
    echo "  ssh - opens shell on server"
    echo "  get <PATH> - downloads file off server"
    echo "  x2go <COMMAND...> - runs GUI command on server, streams back the result"
    echo "  stop - stops DigitalOcean server"
    echo "Subcommands - misc:"
    echo "  help / --help / -h - prints this notice"
    echo "  version / --version / -v - prints version"
}

print_version() {
    echo "Cloudy 0.1.0"
}

## Init

random_id() {
    head /dev/urandom | tr -dc A-Za-z | head -c16
}

run_init() {
    if [ -f $GLOBAL_INIT ] || [ -f $LOCAL_INIT ]; then
        m_ssh $ID $IP " apt-get update"
    fi

    if [ -f $GLOBAL_INIT ]; then
        m_ssh $ID $IP " bash -ls" < $GLOBAL_INIT
    fi

    if [ -f $LOCAL_INIT ]; then
        m_ssh $ID $IP " bash -ls" < $LOCAL_INIT
    fi
}

server_setup() {
    echo "Setting up server..."

    # TODO: WARN: when updating Ubuntu, check if this fix is still necessary
    m_ssh $ID $IP "sed -i -e 's/mesg n .*true/tty -s \&\& mesg n/g' /root/.profile | true"

    SSUD=$(echo $SERVER_SIDE_UTILS_DIR)
    UTILS_CMD="
        if [ -e $SSUD ]; then
            exit 0
        fi
        mkdir -p $SSUD

        echo add-apt-repository ppa:x2go/stable -y >> $SSUD/install_x2go
        echo apt-get install x2goserver x2goserver-xsession -y >> $SSUD/install_x2go
        chmod +x $SSUD/install_x2go

        echo apt-get install build-essential -y >> $SSUD/install_rust
        echo curl https://sh.rustup.rs -sSf \\| sh -s -- --default-toolchain none -y >> $SSUD/install_rust
        echo /root/.cargo/bin/rustup toolchain add \\\${1:-stable} >> $SSUD/install_rust
        chmod +x $SSUD/install_rust

        echo PATH=$SSUD:\$PATH >> /root/.profile
    "

    echo "$UTILS_CMD" | m_ssh $ID $IP " bash -ls"

    m_rsync $ID $IP &
    run_init

    echo "Waiting for files to finish transferring..."
    wait

    echo "Done."

    echo "$ID $IP" > $LOCAL_LOCKFILE
}

cmd_order() {
    assert_lockfile_absent

    KEY=$(awk "{print \$2}" "$KEY_PATH.pub" \
        | openssl base64 -d \
        | openssl md5 \
        | cut -f2 -d' ' \
        | sed 's/../&:/g;s/:$//')

    ID=cloudy-droplet-`random_id`
    echo "Ordering $ID, size = $SIZE, region = $REGION, key = $KEY..."

    IP=$(doctl compute droplet create $ID \
        --region $REGION \
        --image ubuntu-18-04-x64 \
        --size $SIZE \
        --ssh-keys "$KEY" \
        --output=json \
        --wait \
        | python3 -c "import sys, json; print(json.load(sys.stdin)[0]['networks']['v4'][0]['ip_address'])")

    echo "Droplet started."

    # Sleep as DigitalOcean returns before SSH server is ready
    sleep 30

    # TODO: maybe DO will start pushing fingerprint via API one day
    ssh-keyscan $IP >> ~/.ssh/known_hosts

    server_setup
}

cmd_use() {
    assert_lockfile_absent
    if [ -z "$1" ]; then
        echo "Provide server IP or alias!"
        exit 1
    fi
    IP=$1
    ID=cloudy-server-`random_id`
    echo "Using $ID..."
    server_setup
}

## Control

cmd_reinit() {
    assert_lockfile_present
    run_init
}

cmd_cmd() {
    assert_lockfile_present
    m_rsync $ID $IP
    CMD=" cd cloudy; $@"
    m_ssh $ID $IP " bash -ls -c \"$CMD\""
}

cmd_cmd-alt() {
    assert_lockfile_present
    m_rsync $ID $IP
    CMD=" cd cloudy; $@"
    echo $CMD | m_ssh $ID $IP " bash -ls"
}

cmd_ssh() {
    assert_lockfile_present
    m_rsync $ID $IP
    m_ssh $ID $IP
}

cmd_get() {
    assert_lockfile_present
    if [ -z "$1" ]; then
        echo "Missing path."
        exit 1
    fi
    if [ ${1:0:1} == "/" ] || [ ${1:0:1} == "~" ]; then
        echo "Cannot download absolute paths"
        exit 1
    fi
    m_rev_rsync $ID $IP $1
}

cmd_x2go() {
    assert_lockfile_present
    if [ -z "$1" ]; then
        echo "Provide a program to run!"
        exit 1
    fi
    m_rsync $ID $IP
    CMD="$@"
    m_x2go $ID $IP $CMD
}

cmd_stop() {
    assert_lockfile_present
    rm $LOCAL_LOCKFILE
    doctl compute droplet delete $ID -f
}

subcommand=$1
case $subcommand in
    "" | "-h" | "--help" | "help")
        print_help
        ;;
    "-v" | "--version" | "version")
        print_version
        ;;
    *)
        shift
        cmd_${subcommand} $@
        ;;
esac
exit 0
